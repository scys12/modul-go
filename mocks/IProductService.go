// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/scys12/modul-go/internal/model"
	mock "github.com/stretchr/testify/mock"

	payload "github.com/scys12/modul-go/pkg/payload"
)

// IProductService is an autogenerated mock type for the IProductService type
type IProductService struct {
	mock.Mock
}

// BuyProduct provides a mock function with given fields: productID
func (_m *IProductService) BuyProduct(productID int) error {
	ret := _m.Called(productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: productID, userID
func (_m *IProductService) DeleteProduct(productID int, userID int) error {
	ret := _m.Called(productID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(productID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableProducts provides a mock function with given fields:
func (_m *IProductService) GetAvailableProducts() ([]model.Product, error) {
	ret := _m.Called()

	var r0 []model.Product
	if rf, ok := ret.Get(0).(func() []model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: productID
func (_m *IProductService) GetProduct(productID int) (model.Product, error) {
	ret := _m.Called(productID)

	var r0 model.Product
	if rf, ok := ret.Get(0).(func(int) model.Product); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerProducts provides a mock function with given fields: sellerID
func (_m *IProductService) GetSellerProducts(sellerID int) ([]model.Product, error) {
	ret := _m.Called(sellerID)

	var r0 []model.Product
	if rf, ok := ret.Get(0).(func(int) []model.Product); ok {
		r0 = rf(sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: _a0, _a1
func (_m *IProductService) InsertProduct(_a0 payload.ProductRequest, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(payload.ProductRequest, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *IProductService) UpdateProduct(_a0 payload.ProductRequest, _a1 int, _a2 int) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(payload.ProductRequest, int, int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
